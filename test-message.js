const axios = require('axios');

// Teste espec√≠fico para envio de mensagens
async function testMessageSending() {
    console.log('üì± Testando envio de mensagens via Telezapy...\n');
    
    // Configura√ß√µes do Telezapy
    const TELEZAPY_CONFIG = {
        enabled: true,
        apiToken: 'de58e90c195fd9a9fb7106e8dc388dbe60cb82fb50eabe38dcdac635eeb7f1df2c265f0d8cd718b37b44eb5c3eb87f7718210663e2fa88e842a25fc0c4dd628092eb6e367765be1b8b637f80ba20e76a7571346b3743093da905850847386d99b1d1f324c5d5ca3023734b084f6b460447098449c1b2e6bd873aa3c026',
        apiUrl: 'https://api-krolik.telezapy.tech',
        sendEndpoint: '/api/send',
        messageTemplate: "Ol√° {name}, vi que se interessou em nossos produtos.",
        connectionFrom: 6,
        ticketStrategy: "create"
    };
    
    // Dados de teste
    const testPerson = {
        id: 62222475,
        name: "Felipe",
        whatsapp: "5519995068303"
    };
    
    console.log('üë§ Pessoa de teste:');
    console.log(`   Nome: ${testPerson.name}`);
    console.log(`   WhatsApp: ${testPerson.whatsapp}`);
    console.log(`   ID: ${testPerson.id}`);
    
    console.log('\nüìù Mensagem a ser enviada:');
    const message = TELEZAPY_CONFIG.messageTemplate.replace('{name}', testPerson.name);
    console.log(`   "${message}"`);
    
    console.log('\nüîó Configura√ß√µes da API:');
    console.log(`   URL: ${TELEZAPY_CONFIG.apiUrl}`);
    console.log(`   Endpoint: ${TELEZAPY_CONFIG.sendEndpoint}`);
    console.log(`   Token: ${TELEZAPY_CONFIG.apiToken.substring(0, 8)}...`);
    
    // Teste 1: Verificar se a API est√° acess√≠vel
    console.log('\n1Ô∏è‚É£ Testando conectividade com a API...');
    try {
        const testUrl = `${TELEZAPY_CONFIG.apiUrl}/health`;
        const response = await axios.get(testUrl, { timeout: 10000 });
        console.log('‚úÖ API acess√≠vel');
        console.log(`   Status: ${response.status}`);
    } catch (error) {
        if (error.code === 'ECONNABORTED') {
            console.log('‚ö†Ô∏è  Timeout na API (pode ser normal)');
        } else if (error.response) {
            console.log('‚ö†Ô∏è  API respondeu com erro');
            console.log(`   Status: ${error.response.status}`);
        } else {
            console.log('‚ö†Ô∏è  Erro de conectividade');
            console.log(`   Erro: ${error.message}`);
        }
    }
    
    // Teste 2: Tentar enviar mensagem
    console.log('\n2Ô∏è‚É£ Tentando enviar mensagem...');
    try {
        // Preparar dados para API
        const messageData = {
            body: message,
            connectionFrom: TELEZAPY_CONFIG.connectionFrom,
            ticketStrategy: TELEZAPY_CONFIG.ticketStrategy
        };
        
        // Headers para Telezapy
        const telezapyHeaders = {
            'accept': 'application/json',
            'Authorization': `Bearer ${TELEZAPY_CONFIG.apiToken}`,
            'Content-Type': 'application/json'
        };
        
        // URL completa para envio
        const sendUrl = `${TELEZAPY_CONFIG.apiUrl}${TELEZAPY_CONFIG.sendEndpoint}/${testPerson.whatsapp}`;
        
        console.log(`   URL de envio: ${sendUrl}`);
        console.log(`   Dados: ${JSON.stringify(messageData, null, 2)}`);
        console.log(`   Headers: ${JSON.stringify(telezapyHeaders, null, 2)}`);
        
        const response = await axios.post(sendUrl, messageData, { 
            headers: telezapyHeaders,
            timeout: 30000
        });
        
        console.log('‚úÖ Mensagem enviada com sucesso!');
        console.log(`   Status: ${response.status}`);
        console.log(`   Resposta: ${JSON.stringify(response.data, null, 2)}`);
        
    } catch (error) {
        console.log('‚ùå Erro ao enviar mensagem:');
        console.log(`   Erro: ${error.message}`);
        
        if (error.response) {
            console.log(`   Status: ${error.response.status}`);
            console.log(`   Dados: ${JSON.stringify(error.response.data, null, 2)}`);
            console.log(`   Headers: ${JSON.stringify(error.response.headers, null, 2)}`);
        } else if (error.request) {
            console.log('   Nenhuma resposta recebida da API');
        }
        
        // Verificar se √© erro de autentica√ß√£o
        if (error.response && error.response.status === 401) {
            console.log('\nüîê Poss√≠vel problema de autentica√ß√£o:');
            console.log('   - Verifique se o token est√° correto');
            console.log('   - Verifique se o token n√£o expirou');
            console.log('   - Verifique se a API est√° ativa');
        }
        
        // Verificar se √© erro de formato
        if (error.response && error.response.status === 400) {
            console.log('\nüìù Poss√≠vel problema de formato:');
            console.log('   - Verifique se o n√∫mero est√° no formato correto');
            console.log('   - Verifique se os campos obrigat√≥rios est√£o presentes');
        }
    }
    
    // Teste 3: Verificar formato do n√∫mero
    console.log('\n3Ô∏è‚É£ Verificando formato do n√∫mero...');
    const cleanNumber = testPerson.whatsapp.replace(/\D/g, '');
    console.log(`   N√∫mero original: ${testPerson.whatsapp}`);
    console.log(`   N√∫mero limpo: ${cleanNumber}`);
    console.log(`   Comprimento: ${cleanNumber.length} d√≠gitos`);
    
    if (cleanNumber.length < 10) {
        console.log('   ‚ö†Ô∏è  N√∫mero muito curto (m√≠nimo 10 d√≠gitos)');
    } else if (cleanNumber.length > 15) {
        console.log('   ‚ö†Ô∏è  N√∫mero muito longo (m√°ximo 15 d√≠gitos)');
    } else {
        console.log('   ‚úÖ Formato do n√∫mero parece correto');
    }
    
    console.log('\nüéØ Teste conclu√≠do!');
    console.log('üí° Verifique os logs acima para identificar poss√≠veis problemas.');
}

// Executar teste
testMessageSending().catch(console.error);
